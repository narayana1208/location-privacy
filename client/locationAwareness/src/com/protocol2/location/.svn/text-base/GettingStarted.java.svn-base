package com.protocol2.location;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

import com.facebook.android.AsyncFacebookRunner;
import com.facebook.android.Facebook;
import com.facebook.android.FacebookError;
import com.facebook.android.R;
import com.facebook.android.Util;
import com.protocol2.location.SessionEvents.AuthListener;
import com.protocol2.location.SessionEvents.LogoutListener;

public class GettingStarted extends Activity{
    public static final String APP_ID = "106215252764932";
    
    private static final String[] PERMISSIONS =
        new String[] {"offline_access", "user_website", "friends_website", "user_photos", "friends_photos"};
    private LoginButton mLoginButton;
    private TextView mText;
    private Button mRequestButton;
    private Button mDeleteButton;
    
    private SharedPreferences loggedIn;
 
    
    private Facebook mFacebook;
    private AsyncFacebookRunner mAsyncRunner;

	
	 /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
    	setContentView(R.layout.getting_started_one);
    	
	    // Set up app-wide global that will set whether or not user is logged into facebook (basically whether or not to display getting started screen)
	    loggedIn = getSharedPreferences("loggedIn", MODE_PRIVATE);
	    if ( loggedIn.getBoolean("loggedIn", false) ) {
	    	start_mainLocation_Activity();
	    }
    	
    	// Set up UI components
    	mLoginButton = (LoginButton) findViewById(R.id.startFB);
        mText = (TextView) GettingStarted.this.findViewById(R.id.txt_error);
        mDeleteButton = (Button) findViewById(R.id.deletePostButton);
        
    	mFacebook = new Facebook();
       	mAsyncRunner = new AsyncFacebookRunner(mFacebook);
       
        SessionStore.restore(mFacebook, getApplicationContext());
        SessionEvents.addAuthListener(new SampleAuthListener());
        SessionEvents.addLogoutListener(new SampleLogoutListener());
        mLoginButton.init(mFacebook, PERMISSIONS);         
    }
  public class SampleAuthListener implements AuthListener {
        
        public void onAuthSucceed() {
            mText.setText("You have logged in! ");
            Intent partTwoIntent = new Intent(GettingStarted.this, GettingStartedPartTwo.class);
            GettingStarted.this.startActivityForResult(partTwoIntent, 43);
        }

        public void onAuthFail(String error) {
            mText.setText("Login Failed: " + error);
        }
    }
    
    public class SampleLogoutListener implements LogoutListener {
        public void onLogoutBegin() {
        	// Clear stored friends
        	ExtendedCheckBoxListAdapter e = ExtendedCheckBoxListAdapter.getInstance(GettingStarted.this.getApplicationContext());
        	e.clearFriends();
        	
        	// Clear whether or not we have logged in
        	SharedPreferences.Editor loggedInEditor = loggedIn.edit();
	    	loggedInEditor.putBoolean("loggedIn", false);
	    	loggedInEditor.commit();
        	
            mText.setText("Logging out...");
        }
        
        public void onLogoutFinish() {
            mText.setText("You have logged out! ");
        }
    }
    
    public class SampleRequestListener extends BaseRequestListener {

        public void onComplete(final String response) {
            try {
                // process the response here: executed in background thread
                Log.d("Facebook-Example", "Response: " + response.toString());
                JSONObject json = Util.parseJson(response);
                final String name = json.getString("name");
                
                // then post the processed result back to the UI thread
                // if we do not do this, an runtime exception will be generated
                // e.g. "CalledFromWrongThreadException: Only the original 
                // thread that created a view hierarchy can touch its views."
                GettingStarted.this.runOnUiThread(new Runnable() {
                    public void run() {
                        mText.setText("Hello there, " + name + "!");
                    }
                });
            } catch (JSONException e) {
                Log.w("Facebook-Example", "JSON Error in response");
            } catch (FacebookError e) {
                Log.w("Facebook-Example", "Facebook Error: " + e.getMessage());
            }
        }
    }
    
    public class WallPostRequestListener extends BaseRequestListener {
        
        public void onComplete(final String response) {
            Log.d("Facebook-Example", "Got response: " + response);
            String message = "<empty>";
            try {
                JSONObject json = Util.parseJson(response);
                message = json.getString("message");
            } catch (JSONException e) {
                Log.w("Facebook-Example", "JSON Error in response");
            } catch (FacebookError e) {
                Log.w("Facebook-Example", "Facebook Error: " + e.getMessage());
            }
            final String text = "Your Wall Post: " + message;
            GettingStarted.this.runOnUiThread(new Runnable() {
                public void run() {
                    mText.setText(text);
                }
            });
        }
    }
    
    public class WallPostDeleteListener extends BaseRequestListener {
        
        public void onComplete(final String response) {
            if (response.equals("true")) {
                Log.d("Facebook-Example", "Successfully deleted wall post");
                GettingStarted.this.runOnUiThread(new Runnable() {
                    public void run() {
                        mDeleteButton.setVisibility(View.INVISIBLE);
                        mText.setText("Deleted Wall Post");
                    }
                });
            } else {
                Log.d("Facebook-Example", "Could not delete wall post");
            }
        }
    }
    
    public class SampleDialogListener extends BaseDialogListener {

        public void onComplete(Bundle values) {
            final String postId = values.getString("post_id");
            if (postId != null) {
                Log.d("Facebook-Example", "Dialog Success! post_id=" + postId);
                mAsyncRunner.request(postId, new WallPostRequestListener());
                mDeleteButton.setOnClickListener(new OnClickListener() {
                    public void onClick(View v) {
                        mAsyncRunner.request(postId, new Bundle(), "DELETE", 
                                new WallPostDeleteListener());
                    }
                });
                mDeleteButton.setVisibility(View.VISIBLE);
            } else {
                Log.d("Facebook-Example", "No wall post made");
            }
        }
    }
    
    private void start_mainLocation_Activity()
    {
    	Intent getStartedIntent = new Intent(this, mainLocation.class);
    	GettingStarted.this.startActivity(getStartedIntent);
    }
    
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
    	if (requestCode == 43)
    	{
    		if (resultCode == RESULT_OK)
    		{
    	    	SharedPreferences.Editor loggedInEditor = loggedIn.edit();
    	    	loggedInEditor.putBoolean("loggedIn", true);
    	    	loggedInEditor.commit();
    	    	
    	    	start_mainLocation_Activity();
    		}
    	}
    }
}

